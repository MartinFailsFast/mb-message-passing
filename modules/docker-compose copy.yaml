x-env-vars: &env_vars
  DB_USERNAME: ct_admin
  DB_PASSWORD: hotdogsfordinner
  DB_NAME: geoconnections
  DB_HOST: postgres #host.docker.internal
  DB_PORT: 5432
  KAFKA_SERVER: kafka:9092
  PERSON_HOST: http://api-person:5001/api/persons #http://localhost:5001/api/persons #http://modules-api-person-1:5001/api/persons
  LOCATION_HOST: http://api-locations:5002/api/locations #http://modules-api-locations-1:5002/api/locations

networks:
  udaconnect_network:
    driver: bridge

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - udaconnect_network

  kafka:
    image: bitnami/kafka:latest
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true  # Allow topic auto-creation
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    networks:
      - udaconnect_network
  
  api-locations:
    build:
      context: ./api-locations
    ports:
      - "5005:5005"
      - "5002:5002"
    depends_on:
      - kafka
    environment:
      <<: *env_vars
    networks:
      - udaconnect_network
  
  api-person:
    build:
      context: ./api-person
    ports:
      - "5001:5001"
    environment:
      <<: *env_vars
    networks:
      - udaconnect_network
  
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - api-person
    environment:
      <<: *env_vars
    networks:
      - udaconnect_network

  postgres:
    image: postgis/postgis:15-3.3
    container_name: postgis_db
    environment:
      POSTGRES_USER: ct_admin
      POSTGRES_PASSWORD: hotdogsfordinner
      POSTGRES_DB: geoconnections
    ports:
      - "5432:5432"
    networks:
      - udaconnect_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

volumes:
  postgres_data:


  
