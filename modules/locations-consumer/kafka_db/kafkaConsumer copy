import json
import logging
import threading
import time
import os
from kafka.errors import KafkaError
from sqlalchemy.orm import Session
from db.db_setup import SessionLocal
from db.models import Location
from geoalchemy2.functions import ST_Point
from datetime import datetime
from config import Config 


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger("kafka-consumer")


def connect_kafka_with_retry(max_retries=Config.MAX_RETRIES, initial_delay=Config.RETRY_INTERVAL):
    retries = 0
    while retries < max_retries:
        try:
            consumer = KafkaConsumer(
                Config.KAFKA_TOPIC,
                bootstrap_servers=Config.KAFKA_BROKER,
                group_id=Config.KAFKA_CONSUMER_GROUP,
                value_deserializer=lambda x: json.loads(x.decode("utf-8")),
                auto_offset_reset="earliest"
            )
            logger.info("Consumer connected to Kafka successfully.")
            return consumer
        except KafkaError as e:
            logger.error(f"Kafka connection failed (attempt {retries + 1}): {e}")
            retries += 1
            wait_time = initial_delay * (2 ** retries)  # Exponential backoff
            logger.info(f"Retrying in {wait_time} seconds...")
            time.sleep(wait_time)

    logger.critical("Consumer could not connect to Kafka. Exiting...")
    exit(1)

def consume_messages():
    """Kafka Consumer that runs in a separate thread."""
    consumer = connect_kafka_with_retry()
    session = SessionLocal()

    logger.info("Kafka Consumer started. Listening for messages...")

    try:
        for message in consumer:
            data = message.value
            logger.info(f"Received data: {data}")

            '''
            try:
                new_location = Location(
                    person_id=data["person_id"],
                    coordinate=ST_Point(data["latitude"], data["longitude"]),
                    creation_time=datetime.strptime(data["creation_time"], "%Y-%m-%dT%H:%M:%S")
                )

                session.add(new_location)
                session.commit()
                logger.info(f"Saved location for person {new_location.person_id}")

            except Exception as e:
                session.rollback()
                logger.error(f"Error saving to DB: {e}")'
            '''

    finally:
        session.close()
        consumer.close()
        logger.info("Kafka Consumer stopped.")

def start_consumer():
    """Start consumer in a separate thread."""
    consumer_thread = threading.Thread(target=consume_messages, daemon=True)
    consumer_thread.start()
